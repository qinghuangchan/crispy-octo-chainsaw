blueprint:
  name: Motion Controlled Lights with Manual Override
  description: "When a binary_sensor is triggered, turn on one or more lights with brightness specified by a input_number. When the binary_sensor is reset, turn off configured lights after a timeout. If configured lights are manually turned on or off during, the automation will not turn off any lights after the cooldown."
  domain: automation
  input:
    binary_sensor_trigger:
      name: Binary Sensor to Trigger On and Off
      description: "This must be a binary_sensor. The automation turns on and off lights on the state of this sensor"
      selector:
        entity:
          domain: binary_sensor

    lights_brightness_input_number:
      name: Input Number to Control Brightness of Lights
      description: "This must be a input_number with min 0 and max 100. The automation sets brightness of lights based on this value."
      selector:
        entity:
          domain: input_number
          
    lights_list:
      name: Lights to Trigger
      selector:
        entity:
          domain: switch
          multiple: true
      
    switches_list:
      name: Switches to Trigger
      selector:
        entity:
          domain: switch
          multiple: true

    lights_off_delay:
      name: Lights Off Delay
      selector: 
        number:
          min: 0
          max: 86400
          mode: box
          unit_of_measurement: "seconds"
      
# variables: 
#   lights_list: !input lights_list
  
trigger:
  - platform: state
    entity_id: !input binary_sensor_trigger
    from: "off"
    to: "on"

condition:
  - condition: numeric_state
    entity_id: !input lights_brightness_input_number
    above: 0
  - condition: state
    entity_id: !input lights_list
    state: "off"
  - condition: state
    entity_id: !input switches_list
    state: "off"
    
action:
  - service: light.turn_on
    data:
      brightness_pct: !input lights_brightness_input_number
    target:
      entity_id: !input lights_list
  - service: switch.turn_on
    target:
      entity_id: !input switches_list
  - wait_for_trigger:
      - platform: state
        entity_id:
          - !input binary_sensor_trigger
        from: "on"
        to: "off"
        for:
          hours: 0
          minutes: 0
          seconds: !input lights_off_delay
      - platform: state
        entity_id: !input lights_list
        from: "on"
        to: "off"
      - platform: state
        entity_id: !input switches_list
        from: "on"
        to: "off"
      
  - choose:
      - conditions:
          - condition: template
            value_template: '{{ wait.trigger.id == 0 }}'
        sequence:
          - service: light.turn_off
            data:
              brightness_pct: !input lights_brightness_input_number
            target:
              entity_id: !input lights_list
          - service: switch.turn_off
            target:
              entity_id: !input switches_list
              
      - conditions:
          - condition: template
            value_template: '{{ wait.trigger.id == 1 || wait.trigger.id == 2 }}'
        sequence:
          - stop: "Automation because a light or switch was manually triggered"

mode: single
